import { Link as RouterLink } from 'react-router-dom';
import React, { useState } from 'react';

import {
    Heading,
    VStack,
    Button,
    Text,
} from '@chakra-ui/react';
import { toaster } from '../components/ui/toaster';

import CustomFormInput from '../components/Auth/CustomFormInput';
import AuthFlexContainer from '../components/Auth/AuthFlexContainer';
import RadioButton from '../components/Buttons/RadioButton';
import UploadFile from '../components/Others/UploadFile';

import FormValidation from '../utils/FormValidation';
import GroupApi from '../services/GroupApi';


const items = [
    { value: "public", label: "public" },
    { value: "private", label: "private" },
];

const CreateGroup = () => {

    const user_id = localStorage.getItem('user_id');
    const [formData, setFormData] = useState({
        group_name: '',
        group_description: '',
        group_status: items[0].value,
        group_image: '',
        user_id: 'user_id'
    });
    const [errors, setErrors] = useState({});

    const handleChange = (e) => {
        if (!e || !e.target) {
            console.error('Event or event target is undefined');
            return;
        }
        const { name, value } = e.target;
        setFormData((prevData) => ({
            ...prevData,
            [name]: value,
        }));
    };

    const handleRadioChange = (value) => {
        setFormData({
            ...formData,
            group_status: value,
        });
    };

    // Fetch api to store group data in database
    // Retrieve the image url for storage generated by database
    // Store the image using url in the database
    const handleSubmit = async (e) => {
        e.preventDefault();
        
        const formErrors = FormValidation.validateCreateGroupForm(formData);
        if(Object.keys(formErrors).length === 0) {
            console.log(formData);
            const result = await GroupApi.createGroup(formData);
            if(result.success) {
                toaster.create({
                    description: result.message,
                    type: "success",
                });
            } else {
                toaster.create({
                    description: result.message,
                    type: "error",
                });
            }
        } else {
            setErrors(formErrors);
        }
    
    };

    return (
        <AuthFlexContainer>
            <Heading mb="4" textAlign='center'>Study Sync</Heading>
            <Heading mb="4" textAlign='center'>Create a new group</Heading>

            <VStack as="form" spacing="4" onSubmit={handleSubmit}>

                <CustomFormInput
                    name="group_name"
                    label="Group Name"
                    value={formData.group_name}
                    onChange={handleChange}
                    type="text"
                    maxLength={20}
                    error={errors.group_name}
                />
                <CustomFormInput
                    name="group_description"
                    label="Group Description"
                    value={formData.group_description}
                    onChange={handleChange}
                    type="textArea"
                    maxLength={200}
                    error={errors.group_description}
                />
                
                <Text textStyle="2x1">Group Status </Text>
                <RadioButton value={formData.group_status} onChange={handleRadioChange} items={items} />

                <UploadFile
                    text="Upload Group Image"
                    accepts={["image/*"]}
                />

                <Button type="submit" colorScheme="blue" width="full">
                    Create Group
                </Button>
            </VStack>
          
        </AuthFlexContainer>
               
    );
};


export default CreateGroup;